{
    "contents" : "---\ntitle: \"Most Expensive and Most Harmful Weather Events in US (1950-2011)\"\nauthor: \"Maxim Shayduk\"\ndate: \"January 21, 2016\"\noutput: html_document\n---\n<style>\ntable.res th {\n    background-color: #333333;\n    color: #ffffff;\n}\ntable.print th {\n    background-color: #d9d9d9;\n    font-family: Courier; \n    font-size: small;\n}\ntable.print td {\n    font-family: Courier; \n    font-size: small;\n    background-color: #ffffe5;\n}\n.code{\n    color: darkred; \n    font-family: Courier; \n    font-size: medium;\n}\n</style>\n\n\n```{r global_options, include=FALSE}\nrm(list=ls()) ### To clear namespace\nlibrary(knitr)\nopts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',\n               echo=TRUE, warning=FALSE, message=FALSE, cashe=TRUE   )\n```\n\n###Synopsis###\n\n    \nThis study explores the [U.S. National Oceanic and Atmospheric Administration's (NOAA)](http://www.noaa.gov/wx.html) **storm database** for 1950-2011. The storm data used in this study can be downloaded here: <https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2>. It has **902297** observations of **37** event characteristics (variables).\n\nThe analysis addresses two questions:\n    \n  1. Which types of events are **most harmful** with respect to population health?\n  2. Which types of events have the **greatest economic consequences** (i.e. damage costs)?\n\nThe results are aggregated over years and across the United States. The relevant for this study event characteristics  are: the date of the event, the type of the event, estimates of fatalities and injuries,  estimates of property and crop damage. To increase the study representativeness, the data is splitted into two subsets and results for both subsets are reported.  The full storm data documentation can be downloaded here: [NATIONAL WEATHER SERVICE INSTRUCTION 10-1605](http://www.nws.noaa.gov/directives/sym/pd01016005curr.pdf).\n\n###Data Processing###\n\nThe storm data is downloaded from <https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2> and only relevant (8 out of 37) columns: <span class=code>BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP</span> are read for further analysis. \n```{r, message=F, results='hide'}\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(stringdist)\nlibrary(gridExtra)\nlibrary(xtable)\n# GET and READ\nfilebasename <- \"repdata_data_StormData\"\nurl <- \"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2\"\nif(!file.exists(paste(filebasename,\".csv.bz2\", sep = \"\"))){\n    download.file(url, destfile = \"./repdata_data_StormData.csv.bz2\", method = \"curl\")\n}\nif(!file.exists(paste(filebasename,\".csv\", sep = \"\"))){\n    system(paste(\"bzip2 -d -k \",filebasename,\".csv.bz2\", sep = \"\"))\n}\n# For reading the bz2 file directly  the slower read.csv(bz2, colClasses, ...) can be used\n# classes of not needed columns can be set to NULL in colClasses argument\nfile <- paste(filebasename,\".csv\", sep = \"\")\ncolsToRead <- c(\"BGN_DATE\", \"EVTYPE\", \"FATALITIES\", \"INJURIES\", \n                \"PROPDMG\", \"PROPDMGEXP\", \"CROPDMG\", \"CROPDMGEXP\")\nstormdata <- fread(file, header=TRUE, select = colsToRead, verbose = F)\n```\nThe list of official event types, i.e. values for <span class=code>EVTYPE</span>, was extracted from [NATIONAL WEATHER SERVICE INSTRUCTION 10-1605](http://www.nws.noaa.gov/directives/sym/pd01016005curr.pdf) document to .txt file: EVTYPEfromNWS10-1605_Aug17_2007.txt (see git repo: [stormdatabase](https://github.com/mshayduk/stormdatabase.git)). \n```{r, message=F, results='hide'}\neventTypes <- toupper(readLines(\"EVTYPEfromNWS10-1605_Aug17_2007.txt\"))\n```\n<br>\n\nThe first 5 records of the input data **before any transformations** are listed below:\n\n```{r, results='asis'}\ntableattr=\"class=print border=0 width=800\"\nprint(xtable(head(stormdata, n=5), align=\"lcccccccc\"), type = \"html\", html.table.attributes=tableattr)\n```\n<br>\nColumn <span class=code>BGN_DATE</span> is converted to integer column <span class=code>Year</span>. The exact day and time are omitted. \n```{r}\nstormdata$BGN_DATE <- as.Date(stormdata$BGN_DATE, format = \"%m/%d/%Y\")\nstormdata[,BGN_DATE:=as.integer(format(BGN_DATE, \"%Y\"))]\ncolnames(stormdata)[1] <- \"Year\"\n```\n\nThe exponenta columns for property damage <span class=code>PROPDMGEXP</span>  and crop damage <span class=code>  CROPEXP</span> are converted to numerical format and joined with corresponding mantissas <span class=code>PROPDMG, CROPDMG</span>  to form costs estimates columns <span class=code>PropDmgCost</span> and <span class=code>CropDmgCost</span> in units of U.S. dollars.\n\n```{r}\n# replace literal labels in exponents\nexpCols <- c('PROPDMGEXP', 'CROPDMGEXP')\nstormdata[, (expCols):=lapply(.SD, toupper), .SDcols=expCols]\nstormdata[, (expCols):=lapply(.SD, sub, pattern=\"H\", replacement=\"2\"), .SDcols=expCols]\nstormdata[, (expCols):=lapply(.SD, sub, pattern=\"K\", replacement=\"3\"), .SDcols=expCols]\nstormdata[, (expCols):=lapply(.SD, sub, pattern=\"M\", replacement=\"6\"), .SDcols=expCols]\nstormdata[, (expCols):=lapply(.SD, sub, pattern=\"B\", replacement=\"9\"), .SDcols=expCols]\nstormdata[, (expCols):=lapply(.SD, as.numeric), .SDcols=expCols]\nstormdata[is.na(stormdata)] <- 0\n# adding columns of damage costs (joining mantissa and exponenta. note: 10^0 =1)\nstormdata[, (c('PropDmgCost','CropDmgCost')):= list(PROPDMG*10^PROPDMGEXP, CROPDMG*10^CROPDMGEXP)]\n```\n\n\nThen the total damage costs column <span class=code>TotalDmg = PropDmgCost + CropDmgCost</span> [U.S. dollars]<br> and the total health harm column <span class=code>TotalHarm = FATALITIES + INJURIES </span> [number of casualties] are added to the original data.\n```{r }\nstormdata[, (c(\"TotalDmg\",\"TotalHarm\")) := list(PropDmgCost + CropDmgCost, FATALITIES + INJURIES)]\n```\n<br>\nAfter the described above operations the transformed data looks like this:\n\n```{r, results='asis'}\ntableattr=\"class=print border=0 width=900\"\nprint(xtable(head(stormdata, n=5), digits = 1, align=\"lrrcccccccccc\"), type = \"html\", html.table.attributes=tableattr)\ndim(stormdata)\n```\n\n<br>\nTo reduce the volume,  the data is hierarchically aggregated by <span class=code>Year</span>, <span class=code>EVTYPE</span> and the exponenta columns are dropped:\n```{r, results='asis'}\n#write.table(stormdata[EVTYPE=='TORNADO', list(Year, TotalDmg)], \"./forpapa.txt\", row.names = F)\nstormdata <- stormdata[, list(FATAL = sum(FATALITIES), INJUR = sum(INJURIES), TOTHARM = sum(TotalHarm),\n                              PROPDMG = sum(PropDmgCost), CROPDMG = sum(CropDmgCost), TOTDMG = sum(TotalDmg)), \n                       by=list(Year, EVTYPE)]\nattr=\"class=print border=0 width=900\"\nprint(xtable(head(stormdata, n=8), digits = 1, align=\"lcccccccc\"), type = \"html\", html.table.attributes=attr)\ndim(stormdata)\n```\n\n<br>\nThe last transformation is the matching of <span class=code>EVTYPE</span> to the list of official event type names stored in <span class=code>eventTypes</span> object (see the second chunk). The raw <span class=code>EVTYPE</span> contains **985**  event types while the official list contains only **48** event types:\n\n```{r}\ndata.table(t(c(Ntypes=nlevels(factor(stormdata$EVTYPE)), Nofficial=nlevels(factor(eventTypes)))))\n```\n\nTo classify more values of <span class=code>EVTYPE</span> into the official event types, the <span class=code>EVTYPE</span> column is **capitalized** and cleaned in several steps. First, records with no clear type, i.e. <span class=code>EVTYPE</span> starts with <span class=code>\"SUMMARY\"</span> are omitted. Second, all blank spaces at the start and the end of the event type are removed. Third, patterns <span class=code>\"TSTM\"</span> and <span class=code>\"WILD/FOREST FIRE\"</span> are replaced to <span class=code>\"THUNDERSTORM\"</span> and <span class=code>\"WILDFIRE\"</span>: \n```{r}\nstormdata$EVTYPE <- toupper(stormdata$EVTYPE)\nstormdata <- stormdata[-grep(\"SUMMARY\", stormdata$EVTYPE), ]\nstormdata$EVTYPE <- gsub(\"^\\\\s*|\\\\s*$\", replacement = \"\", stormdata$EVTYPE)\nstormdata$EVTYPE <- sub(\"TSTM\", replacement = \"THUNDERSTORM\", stormdata$EVTYPE)\nstormdata$EVTYPE <- sub(\"WILD/FOREST FIRE\", replacement = \"WILDFIRE\", stormdata$EVTYPE)\n```\n\nThe last step is the classification of the <span class=code>EVTYPE</span> values to the official event types \nwith partial pattern matching, using both <span class=code>grepl(...)</span> and  <span class=code>amatch(...)</span> functions. The <span class=code>grepl(...)</span> searches for the official event type in the beginning of the <span class=code>EVTYPE</span> string. In addition, the approximate string matching is done by the <span class=code>amatch(...)</span> function from <span class=code>stringdist</span> package. For both functions, if the match is found, the <span class=code>EVTYPE</span> is replaced by the corresponding official event type. \nFinally, the logical column <span class=code>cleanEVTYPE</span> is added with values <span class=code>TRUE</span> only if the event was succesfully classified into one of the official event types. \n\n```{r}\nstormdata$EVTYPE <- gsub(\"\\\\s*\",\"\",stormdata$EVTYPE)\nfor(i in 1:length(eventTypes)) {\n    pattern <- sub(\"/\", \"|\", eventTypes[i])\n    pattern <- gsub(\"\\\\s*\",\"\", pattern)\n    stormdata$EVTYPE[grepl(paste(\"^\", pattern, \".*\", sep = \"\"), x = stormdata$EVTYPE)] <- eventTypes[i]\n    stormdata$EVTYPE[as.logical(amatch(stormdata$EVTYPE, pattern, maxDist = 0.2*nchar(pattern), nomatch = 0))] <- eventTypes[i]\n}\n# adding a column of clean event types\nstormdata[, cleanEVTYPE := stormdata$EVTYPE %in% eventTypes]\n```\n\nAfter cleaning the <span class=code>EVTYPE</span> is classified into much smaller number of classes:\n```{r}\ndata.table(t(c(Ntypes=nlevels(factor(stormdata$EVTYPE)), Nofficial=nlevels(factor(eventTypes)))))\n```\n\nThe final data with the new logical <span class=code>cleanEVTYPE</span> column looks like this: \n\n```{r, results='asis'}\nattr=\"class=print border=0 width=900\"\nprint(xtable(head(stormdata, n=8), digits = 1, align=\"lccccccccc\"), type = \"html\", html.table.attributes=attr)\n```\n\n\n###Analysis###\n\nTo justify if the described above cleaning of the data is sufficient to perform the analysis with the credible outcome, \nlet's estimate the contribution of the non-classified records to the total aggregates. \n\nFirst, let's plot the number of official and non-official event types (not number of records!) per year:\n```{r, fig.height=3, fig.width=9}\n# number of tracked event types per year\nnEVTYPEperYear <- stormdata[, nlevels(as.factor(EVTYPE)), by = list(Year, cleanEVTYPE)]\nnEVTYPEperYear <- nEVTYPEperYear[order(cleanEVTYPE, Year)]\nnEVTYPEperYear$cleanEVTYPE <- ifelse(nEVTYPEperYear$cleanEVTYPE, \"Official\", \"Non-official\")\ncolnames(nEVTYPEperYear)[2] <- \"EVTYPE\"\nrefIndex1 <- which(nEVTYPEperYear$EVTYPE==\"Official\")[6]\nrefIndex2 <- length(nEVTYPEperYear$EVTYPE==\"Official\")\n\nggplot(nEVTYPEperYear, aes(x=Year, y=V1, col=EVTYPE)) + geom_point(size=3) + \n    geom_line(size=2) + ylab(\"Number of event types\" ) + scale_y_log10() +\n    scale_x_continuous(breaks = round(seq(min(nEVTYPEperYear$Year), max(nEVTYPEperYear$Year), by = 5),1)) + \n    annotate(\"text\", x = 1955, y = 1.4*nEVTYPEperYear$V1[refIndex1], \n             label = paste(nEVTYPEperYear$V1[refIndex1],\" types\")) + \n    annotate(\"text\", x = 2009, y = 1.4*nEVTYPEperYear$V1[refIndex2], \n             label = paste(nEVTYPEperYear$V1[refIndex2],\" types\"))\n```\n<br>\nThis plot demonstrates that there are only 3 types (all classified as official types) of the events that were tracked  before 1993. These types are <span class=code>\"TORNADO\", \"THUNDERSTORM WIND\"</span> and <span class=code>\"HAIL\"</span>.\nThus, this data (<1993) can distort the statistics of the events, accumulated over all years. After the Year 1992 there are many more tracked event types in both categories: offical and non-official. This suggests splitting the data into two subsets: \n\n  * Subset1: records before 1993\n  * Subset2: records after 1992 \n\nThe events with non-official type are present only in the Subset2, let's estimate their contribution to the **total health harm** and **total damage**, relative to the contribution of the offcial event types:\n```{r, fig.height=10, fig.width=10}\n# Contibution of custom-made events  to total harm and total damage compared to official events\nthrm1993 <- stormdata[Year>=1993, list(TOTHARM=sum(TOTHARM)), by=cleanEVTYPE]\nthrm1993frac <- thrm1993[cleanEVTYPE==F,]$TOTHARM/thrm1993[cleanEVTYPE==T,]$TOTHARM\ntdmg1993 <- stormdata[Year>=1993, list(TOTDMG=sum(TOTDMG)), by=cleanEVTYPE]\ntdmg1993frac <- tdmg1993[cleanEVTYPE==F,]$TOTDMG/tdmg1993[cleanEVTYPE==T,]$TOTDMG\n\nnonclean <- c(thrm1993frac, tdmg1993frac)\nnonclean <- sapply(nonclean, function(x){ paste(format(100*x, digits = 3),\"%\")})\nattributes(nonclean)$names <- c(\" Rel.Harm (>1992) \", \" Rel.Damage (>1992) \")\n```\n\n```{r, results='asis'}\ntableattr=\"class=print border=0 width=300 style='text-align:left'\"\nprint(xtable(as.data.table(t(nonclean))), type = \"html\", html.table.attributes=tableattr, include.rownames = F)\n```\n<br>\nThe contribution of the **non-official** events is less then 5% of that of the **official events**. Thus, the data cleaning perfomed above is sufficient and the non-offical events can be omitted as non-significant:\n```{r}\n# drop custom-made events as having non-significant (<5%) contribution to results \nif(sum(nonclean<5)!=length(nonclean)) {\n    warning(\" Omitting too much data... Please try to tag more observations with official event type\")\n}\nstormdata <- stormdata[cleanEVTYPE==T, ]\n```\n\nFinally, let's aggregate data by <span class=code>EVTYPE</span> for both subsets and make a plot function to show plots in the **Results** section:\n```{r}\n# aggregating by EVTYPE (data for 1950-1992)\nharmbyEvtype <- stormdata[Year<1993, list(Fatalities=sum(FATAL), Injuries=sum(INJUR)), by=EVTYPE]\nharmbyEvtype <- arrange(harmbyEvtype, desc(Fatalities + Injuries))\ndmgbyEvtype <- stormdata[Year<1993, list(Crop=sum(CROPDMG), Property=sum(PROPDMG)), by=EVTYPE]\ndmgbyEvtype <- arrange(dmgbyEvtype, desc(Property + Crop))\n# preparing for plotting\nharmbyEvtype <- melt(harmbyEvtype, id.vars = \"EVTYPE\")\ncolnames(harmbyEvtype)[2] <- \"Harm\"\ndmgbyEvtype <- melt(dmgbyEvtype, id.vars = \"EVTYPE\")\ncolnames(dmgbyEvtype)[2] <- \"Damage\"\n\n# aggregating by EVTYPE (data for 1993-2011)\nharmbyEvtypeCut <- stormdata[Year>1992, list(Fatalities=sum(FATAL), Injuries=sum(INJUR)), by=EVTYPE]\nharmbyEvtypeCut <- arrange(harmbyEvtypeCut, desc(Fatalities + Injuries))\ndmgbyEvtypeCut <- stormdata[Year>1992, list(Crop=sum(CROPDMG), Property=sum(PROPDMG)), by=EVTYPE]\ndmgbyEvtypeCut <- arrange(dmgbyEvtypeCut, desc(Property + Crop))\n# making Top 10  lists\nharmtop10Cut <- head(mutate(.data = harmbyEvtypeCut, Total=Fatalities + Injuries), n=10)\ndmgtop10Cut <- head(mutate(.data = dmgbyEvtypeCut, Total=Property+Crop), n=10)\n# preparing for plotting\nharmbyEvtypeCut <- melt(harmbyEvtypeCut, id.vars = \"EVTYPE\")\ncolnames(harmbyEvtypeCut)[2] <- \"Harm\"\ndmgbyEvtypeCut <- melt(dmgbyEvtypeCut, id.vars = \"EVTYPE\")\ncolnames(dmgbyEvtypeCut)[2] <- \"Damage\"\n\nmakePlotbyEvtype <- function( ... , ylab=ylab, title=title){\n    g <- ggplot( ... ) + geom_bar(stat = \"identity\", col=\"black\") + \n        theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  \n        ggtitle(title) + xlab(NULL) + ylab(ylab)  \n}\n\n```\n\n###Results###\n\nAs revealed by the data analysis, it is better to show the results for two date ranges  1950-1992 and 1993-2011 independently, since these subsets significantly differ in the number of tracked event types.\n<br><br>\n\n####Results for 1950-1992 Data:####\n\nThese dates contain events only of three types: <span class=code>\"TORNADO\", \"THUNDERSTORM WIND\"</span> and <span class=code>\"HAIL\"</span>.\n```{r, fig.height=4.5, fig.width=10}\ng1 <- makePlotbyEvtype(harmbyEvtype, aes(x = factor(EVTYPE, levels = EVTYPE), y = value, fill=Harm),\n                       ylab = \"Number of casualties\", \n                       title = \"Total Health Harm (1950-1992)\")\ng2 <- makePlotbyEvtype(dmgbyEvtype, aes(x = factor(EVTYPE, levels = EVTYPE), y = value, fill=Damage),\n                       ylab = \"Damage costs, U.S. dollars\", \n                       title = \"Total Damage costs (1950-1992)\")\ngrid.arrange(g1,g2, ncol=2)\n\n```\nFrom this stacked bar plot, the <span class=code>\"TORNADO\"</span> is identified as the most extreme event for both criteria, the **total health harm** and the **total damage** (economical consequences).  The results for much more representative 1993-2011 data subset are presented below.\n<br><br>\n\n####Results for 1993-2011 Data:#####\n\nThe plot shows the **total health harm** [number of casualities] and the **total damage** [U.S. dollars], accumulated over years 1993-2011. The contributions from different harm (Fatalities/Injuries) and damage (Crop/Property) categories are stacked.  \n```{r, fig.height=10, fig.width=10}\ng1 <- makePlotbyEvtype(harmbyEvtypeCut, aes(factor(EVTYPE, levels = EVTYPE), y = value, fill=Harm),\n                       ylab = \"\\n Number of casualties per event type \\n\", \n                       title = \"Total Health Harm (1993-2011)\")\ng2 <- makePlotbyEvtype(dmgbyEvtypeCut, aes(factor(EVTYPE, levels = EVTYPE), y = value, fill=Damage),\n                       ylab = \"\\n Damage costs per event type, U.S. dollars \\n\", \n                       title = \"Total Damage costs (1993-2011)\")\ngrid.arrange(g1,g2, nrow=2)\n```\nThe <span class=code>\"TORNADO\"</span> is identified as the **most harmful** event type, and the <span class=code>\"FLOOD\"</span> is the **most expensive** event type. To show values, the **Top-10 most harmful**  and the **Top-10 most expensive** events are expicitely listed below.\n\n<br>\n<p>**MOST HARMFUL EVENTS:**</p>\n```{r, results='asis'}\ntableattr=\"class=res border=0 width=400\"\nprint(xtable(harmtop10Cut, digits=-2), type = \"html\", html.table.attributes=tableattr, include.rownames = F)\n```\n<br>\n<p>**MOST EXPENSIVE EVENTS:**</p>\n```{r, results='asis'}\nprint(xtable(dmgtop10Cut, digits=-2), type = \"html\", html.table.attributes=tableattr, include.rownames = F)\n```\n<br><br>\n",
    "created" : 1456672333703.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3069334668",
    "id" : "4721C3AE",
    "lastKnownWriteTime" : 1454856727,
    "path" : "~/Work/Developer/Coursera/DataScience/Reproducible_Research/CourseProject2/StormStudy.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_markdown"
}